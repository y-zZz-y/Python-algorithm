"""
1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами на промежутке
[-100; 100). Выведите на экран исходный и отсортированный массивы.
Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
"""

import random


def sorting_bubble(mas):
    """
    Улучшенная версия из урока, вместо замены всех чисел с шагом i + 1, в массиве находится максималное число которое
    больше i и проводится замена, тем самым уменьшая кол-во сортировки в массиве
    :param mas:
    :return:
    """
    n = 1
    while n < len(mas):
        for i in range(len(mas) - n):
            step = 0
            if mas[i] > mas[i + 1]:
                step += 1
                while True:
                    try:
                        if mas[i] > mas[i + 1 + step]:
                            step += 1
                        else:
                            break
                    except IndexError:
                        break
                mas[i], mas[i + step] = mas[i + step], mas[i]
        n += 1


massive = [random.randint(-100, 100) for _ in range(10)]
print(f"Исходный массив: {massive}")
sorting_bubble(massive)
print(f"Отсартированный массив: {massive}")
